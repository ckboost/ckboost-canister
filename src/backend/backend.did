type BoostId = nat;
type BoosterPoolId = nat;
type Subaccount = blob;
type Amount = nat;
type Timestamp = int;
type Fee = float64;

type BoostStatus = variant {
  pending;
  active;
  completed;
  cancelled;
  boosted;
  minting;
};

type BoosterAccount = record {
  owner: principal;
  feePercentage: Fee;
  subaccount: Subaccount;
  availableBalance: Amount;
  totalDeposited: Amount;
  totalWithdrawn: Amount;
  totalBoosted: Amount;
  totalFeesEarned: Amount;
  createdAt: Timestamp;
  updatedAt: Timestamp;
};

type BoosterPool = record {
  id: BoosterPoolId;
  owner: principal;
  fee: Fee;
  subaccount: Subaccount;
  availableAmount: Amount;
  totalBoosted: Amount;
  createdAt: Timestamp;
  updatedAt: Timestamp;
};

type BoostRequest = record {
  id: BoostId;
  owner: principal;
  amount: Amount;
  fee: Fee;
  receivedBTC: Amount;
  btcAddress: opt text;
  subaccount: Subaccount;
  status: BoostStatus;
  matchedBoosterPool: opt BoosterPoolId;
  createdAt: Timestamp;
  updatedAt: Timestamp;
};

type BoostRequestResult = variant {
  ok: BoostRequest;
  err: text;
};

type BoosterAccountResult = variant {
  ok: BoosterAccount;
  err: text;
};

type BoosterPoolResult = variant {
  ok: BoosterPool;
  err: text;
};

type TextResult = variant {
  ok: text;
  err: text;
};

service : {
  // Helper functions
  "ckBTCToSatoshis": (float64) -> (nat);
  "satoshisToCkBTC": (nat) -> (float64);
  "getCanisterPrincipal": () -> (principal) query;
  "getDirectBTCAddress": () -> (text);

  // Original functions
  "greet": (text) -> (text) query;
  "whoami": () -> (text);
  
  // Boost request functions
  "registerBoostRequest": (Amount, Fee, nat, opt principal) -> (BoostRequestResult);
  "acceptBoostRequest": (BoostId) -> (text);
  "updateReceivedBTC": (BoostId, Amount) -> (BoostRequestResult);
  "getBoostRequestBTCAddress": (BoostId) -> (TextResult);
  "checkBTCDeposit": (BoostId) -> (BoostRequestResult);
  "getBoostRequest": (BoostId) -> (opt BoostRequest) query;
  "getUserBoostRequests": (principal) -> (vec BoostRequest) query;
  "getAllBoostRequests": () -> (vec BoostRequest) query;
  "getPendingBoostRequests": () -> (vec BoostRequest) query;
  "getBoostedRequests": () -> (vec BoostRequest) query;
  "getMintingRequests": () -> (vec BoostRequest) query;
  
  // Booster account functions
  "registerBoosterAccount": (Fee) -> (BoosterAccountResult);
  "updateBoosterDeposit": (principal, Amount) -> (BoosterAccountResult);
  "withdrawBoosterFunds": (Amount) -> (text);
  "getBoosterAccount": (principal) -> (opt BoosterAccount) query;
  "getAllBoosterAccounts": () -> (vec BoosterAccount) query;
  
  // Minting operations
  "triggerMintingForMyBoostRequest": (BoostId) -> (text);
  "claimMintedCKBTC": (BoostId) -> (text);
  "triggerMintingForBoostReclaim": (BoostId) -> (text);
  "reclaimMintedFunds": (BoostId) -> (text);
  
  // Legacy booster pool functions (deprecated)
  "registerBoosterPool": (Fee) -> (BoosterPoolResult);
  "getBoosterPool": (BoosterPoolId) -> (opt BoosterPool) query;
  "getUserBoosterPools": (principal) -> (vec BoosterPool) query;
  "getAllBoosterPools": () -> (vec BoosterPool) query;
}
